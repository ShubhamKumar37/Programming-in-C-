// <auto-generated />
using EntityRelationshipDemo.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityRelationshipDemo.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250728115856_Initial Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityRelationshipDemo.Models.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("PublisherNavigationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.HasIndex("PublisherNavigationId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.BookPublisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("PublisherId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("BookPublishers");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Author", b =>
                {
                    b.HasOne("EntityRelationshipDemo.Models.Publisher", "PublisherNavigation")
                        .WithOne("AuthorNavigation")
                        .HasForeignKey("EntityRelationshipDemo.Models.Author", "PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PublisherNavigation");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Book", b =>
                {
                    b.HasOne("EntityRelationshipDemo.Models.Author", "AuthorNavigation")
                        .WithMany("BooksNavigation")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EntityRelationshipDemo.Models.Publisher", "PublisherNavigation")
                        .WithMany("Books")
                        .HasForeignKey("PublisherNavigationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthorNavigation");

                    b.Navigation("PublisherNavigation");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.BookPublisher", b =>
                {
                    b.HasOne("EntityRelationshipDemo.Models.Book", "BookNavigation")
                        .WithMany("BookPublishersNavigation")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EntityRelationshipDemo.Models.Publisher", "PublisherNavigation")
                        .WithMany("BookPublishersNavigation")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookNavigation");

                    b.Navigation("PublisherNavigation");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Author", b =>
                {
                    b.Navigation("BooksNavigation");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Book", b =>
                {
                    b.Navigation("BookPublishersNavigation");
                });

            modelBuilder.Entity("EntityRelationshipDemo.Models.Publisher", b =>
                {
                    b.Navigation("AuthorNavigation")
                        .IsRequired();

                    b.Navigation("BookPublishersNavigation");

                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
